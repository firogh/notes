Please address the following topics in a PDF document:

Experience

I have solved many system issues in SUSE. Most of them can be categorized into two groups: crash issues and performance issues.

For crash issues, I haved analyzed more than 100 kernel dumps with crash-utility. I can recall some challening issues I solved:
1) Kernel crashed due to buggy stack pointer(rsp). The most difficult part for this issue is that if this issue happens, then the call traces on stack will be overwritten by page fault handler. It means that you have no idea on what really has happened. 

I came with an idea to solve this issue which is using X86 IST stack to prevent page fault handler from overwriting the task's stack.
Here is the patch: https://github.com/firogh/notes/blob/master/box/0001-x86_64-page-fault-Introduce-pf_ist.patch

The root cause for this issue is that a patch for ebpf miscalculated the rsp.

2) Another kernel crash issue. Kernel crashed in network stack due to using a wrong API to release refernce counter. I figured out the root cause by analyzing dump and going through the source of kernel network stack. The following is the stack traces for this issue.
PID: 58411  TASK: ffff8d43eb61d180  CPU: 0   COMMAND: "python"
 #0 [ffff8cd51f6037f0] machine_kexec at ffffffffb0066912
 #1 [ffff8cd51f603840] __crash_kexec at ffffffffb012bafa
 #2 [ffff8cd51f603900] panic at ffffffffb01ca90e
 #3 [ffff8cd51f603978] oops_end at ffffffffb003240f
 #4 [ffff8cd51f6039e0] do_error_trap at ffffffffb00305a4
 #5 [ffff8cd51f603a90] invalid_op at ffffffffb0800fcb
    [exception RIP: ____cache_alloc+529]
    RIP: ffffffffb0264854  RSP: ffff8cd51f603b40  RFLAGS: 00010082
    RAX: ffffe5b3326c4200  RBX: ffffcf2ebfe07a60  RCX: ffff8cd51e63e408
    RDX: 0000000000000000  RSI: ffffe5b3326c4200  RDI: 000000000000000d
    RBP: ffff8cd51e63e408   R8: 0000000000000000   R9: 0000000000000000
    R10: 0000000000000000  R11: 0000000000000001  R12: ffff8cd51e63e400
    R13: ffffcf2ebfe07a60  R14: ffff8cd51e5c1500  R15: 0000000000000008
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
 #6 [ffff8cd51f603b80] kmem_cache_alloc at ffffffffb023a66d
 #7 [ffff8cd51f603bb8] inet_reqsk_alloc at ffffffffb065c410
 #8 [ffff8cd51f603bd8] tcp_conn_request at ffffffffb065dcf3
 #9 [ffff8cd51f603ce8] tcp_rcv_state_process at ffffffffb0663be7
#10 [ffff8cd51f603d68] tcp_v4_do_rcv at ffffffffb066ec10
#11 [ffff8cd51f603d88] tcp_v4_rcv at ffffffffb067009f
#12 [ffff8cd51f603e18] ip_local_deliver_finish at ffffffffb06496b6
#13 [ffff8cd51f603e38] ip_local_deliver at ffffffffb0649a2b
#14 [ffff8cd51f603e80] ip_rcv at ffffffffb0649ad2
#15 [ffff8cd51f603ed0] __netif_receive_skb_one_core at ffffffffb05f7efa
#16 [ffff8cd51f603ef0] process_backlog at ffffffffb05f907f
#17 [ffff8cd51f603f28] net_rx_action at ffffffffb05f8ea1
#18 [ffff8cd51f603f98] __softirqentry_text_start at ffffffffb0a000ce
#19 [ffff8cd51f603ff0] do_softirq_own_stack at ffffffffb080129a



# Step 2
In reqsk_queue_hash_req(), this initialized reqeust_sock was inserted to tcp established hashtable. This is important because inet_diag_dump_icsk() will scan  this hashtable and get that reqeust_sock.

        inet_ehash_insert(req_to_sk(req), NULL);


# Step 3
Above-mentioned inet_diag_dump_icsk()'s atomic_add_unless() increased rsk_refcnt 
FYI:
rsk_refcnt is defined as a macro to sk_refcnt, so they are same.
#define rsk_refcnt                      __req_common.skc_refcnt

# Step 4
In reqsk_queue_hash_req()(same as Step 2), rsk_refcnt was set to 2 + 1.
        atomic_set(&req->rsk_refcnt, 2 + 1);
This assignment __overwrote__ inet_diag_dump_icsk()'s atomic_add_unless()'s increment on rsk_refcnt. So a potential double free bomb is set up.


We are interested in complex technical challenges you have had to resolve. Walk us through your thought process on choosing the tooling, programming language or colleagues to solve those challenges. How did you meet the quality requirements and how did you ensure this knowledge is passed on? We are particularly interested in any challenges you had with OpenStack, Kubernetes, Linux kernel or Ceph. In absence of experience with any of these, pick some other technology you found most fascinating. Please make sure to call out experience with various programming languages (C, C++, Python, Golang, Rust...).

Also, please tell us about any involvement you have with Open Source projects.

Career development

In this section we’d like to hear more about your career aspirations and long term goals. We’d like to understand what are your passions at work, what inspires you to come back to your workstation every day. Tell us what is your preferred programming language and why? We are also interested to know how and why did you start using Linux professionally? And, in the end, walk us through some of the proudest moments in your career and some of the downfalls.

Education

Please discuss and describe your educational background in detail. What were your strongest subjects in hard sciences? What leadership roles did you take on? What degree and university did you choose, any why? What were your strongest or favorite courses? Do you have any exceptional achievements to share? 

Context

Outline your thoughts on the mission of Canonical. What is it about the company's purpose and goals which is most appealing to you? What do you think is risky or unappealing? Are there any elements of the company goals that you are unsure about? Which other companies are building the sort of products you would like to work on? Why do you most want to work for Canonical?

Please upload your submission as a PDF at the URL given below. Write as much as you need. To avoid bias I have set the system to keep your identity confidential during the review of your submission, please don’t include your name in the PDF or filename.

Thank you! I look forward to reading your answers and meeting later in the process.


