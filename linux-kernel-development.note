* Topic list

  | struct list_head                   | linux/list.h |
  | list_add       list_add_tail       |              |
  | list_move      list_move_tail      |              |
  | list_del                           |              |
  | list_splice    list_splice_init    |              |
  | list_for_each                      |              |
  | list_entry     list_for_each_entry |              |
  | list_for_each_entry_safe           |              |
* Functions
  
* File

* Introduction to the linux kernel 
  NB:
  This is my first formal,solemn note of reading books.
  I just want to make what have been learned clear. 
  For this purpose, I will make best explain my reading to you via these notes.

  As we all known that Robert love is grand master on kernel hacking.LKD is a nice to get started to linux kernel.

* System calls
  NB:
  Now,11-25-11,you know I need get more knowledge on kernel hacking.
** Get startted
   As we all known,all the hardware machine rescources are on the control of kernel.
   By the reason,if we need the resorce ,we shuold to apply for it to kernel.This is the way,you can do is comply with it. 
   Syscall is a meesenger between applications and the kernel,keep it in mind.
   The reason for the existence of syscall is to provide  a stable system.
   Do you think so?
** Communicating with the kernel
** Syscalls serve 3 primary purposes.
   1.It provides an abstracted hardware interface for user-space.
   2.Middle-man,ensure system security and stability.
   3.Build a foundation to virtualized system provide processes.
** Three legal entry point into kernel
    1.Systemcall
    2.Exceptions
    3.Traps
** API,POSIX,libc
   The manner in which the function is used is not any of the kernel's business.
** Syscall
** System call context
* Kernel data structures
  There are 4 built-in data structures which are all our old friends.
  Linked lists,queues,maps,Binary trees.
** Linked lists
   Singly , doubly ,circular linked list.
   Although the Linux kernelâ€™s linked list implementation is unique, it is fundamentally a
   circular doubly linked list. Using this type of linked list provides the greatest flexibility.


* Interrupts and interrupt handlers
** Common concepts
   Interrupts;exceptions;IRQ lines; Interrupt handlers,ISR is part of 
   the device's driver;Interrupt/atomic context.
   Top halves versus bottom halves
** 
  1.CPU is very fast than  other devices.
  2.To respondce to devices ,cpu can use polling and interrupt mechanisms.Which on is better.
  3.Device interrupt controller -> CPU -> kernel
  4.asynchronously , synchronous; interrupts, exceptions.
  5.IRQ lines



* An introduction to kernel synchronization
** Important concepts
   * Critical regions;race conditions;
     pseudo-concurrency; true concurrency;
** 

* Memory management
** Important concepts
   1.Page:kernel use this struct to manage physical and virtual pages.
   2.Zones:the kernel uses the zones to group pages of similar properties.
   3.Per-cpu data:
* VFS
