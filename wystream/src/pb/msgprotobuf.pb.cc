// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgprotobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace weiyun {

namespace {

const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgHead_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFileTransQueryMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFileTransQueryMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFileTransQueryMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFileTransQueryMsgRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgprotobuf_2eproto() {
  protobuf_AddDesc_msgprotobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgprotobuf.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHead_descriptor_ = file->message_type(0);
  static const int MsgHead_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, retmsg_),
  };
  MsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHead));
  MsgHead_Type_descriptor_ = MsgHead_descriptor_->enum_type(0);
  MsgBody_descriptor_ = file->message_type(1);
  static const int MsgBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, reqmsg_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, rspmsg_body_),
  };
  MsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBody_descriptor_,
      MsgBody::default_instance_,
      MsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBody));
  ReqMsgBody_descriptor_ = file->message_type(2);
  static const int ReqMsgBody_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMsgBody, clientfiletransquerymsgreq_body_),
  };
  ReqMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMsgBody_descriptor_,
      ReqMsgBody::default_instance_,
      ReqMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMsgBody));
  RspMsgBody_descriptor_ = file->message_type(3);
  static const int RspMsgBody_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsgBody, clientfiletransquerymsgrsp_body_),
  };
  RspMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspMsgBody_descriptor_,
      RspMsgBody::default_instance_,
      RspMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspMsgBody));
  ClientFileTransQueryMsgReq_descriptor_ = file->message_type(4);
  static const int ClientFileTransQueryMsgReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, ukey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, file_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, upload_domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, file_md5_),
  };
  ClientFileTransQueryMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFileTransQueryMsgReq_descriptor_,
      ClientFileTransQueryMsgReq::default_instance_,
      ClientFileTransQueryMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFileTransQueryMsgReq));
  ClientFileTransQueryMsgRsp_descriptor_ = file->message_type(5);
  static const int ClientFileTransQueryMsgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgRsp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgRsp, next_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgRsp, process_),
  };
  ClientFileTransQueryMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFileTransQueryMsgRsp_descriptor_,
      ClientFileTransQueryMsgRsp::default_instance_,
      ClientFileTransQueryMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFileTransQueryMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFileTransQueryMsgRsp));
  Cmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgprotobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBody_descriptor_, &MsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMsgBody_descriptor_, &ReqMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspMsgBody_descriptor_, &RspMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFileTransQueryMsgReq_descriptor_, &ClientFileTransQueryMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFileTransQueryMsgRsp_descriptor_, &ClientFileTransQueryMsgRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgprotobuf_2eproto() {
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete MsgBody::default_instance_;
  delete MsgBody_reflection_;
  delete ReqMsgBody::default_instance_;
  delete ReqMsgBody_reflection_;
  delete RspMsgBody::default_instance_;
  delete RspMsgBody_reflection_;
  delete ClientFileTransQueryMsgReq::default_instance_;
  delete ClientFileTransQueryMsgReq_reflection_;
  delete ClientFileTransQueryMsgRsp::default_instance_;
  delete ClientFileTransQueryMsgRsp_reflection_;
}

void protobuf_AddDesc_msgprotobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msgprotobuf.proto\022\006weiyun\"\225\001\n\007MsgHead\022"
    "\013\n\003uin\030\001 \002(\003\022\013\n\003seq\030\002 \002(\r\022\"\n\004type\030\003 \001(\0162"
    "\024.weiyun.MsgHead.Type\022\013\n\003cmd\030\004 \001(\005\022\017\n\007re"
    "tcode\030e \001(\005\022\016\n\006retmsg\030f \001(\t\"\036\n\004Type\022\n\n\006R"
    "eqMsg\020\001\022\n\n\006RspMsg\020\002\"[\n\007MsgBody\022\'\n\013ReqMsg"
    "_body\030\001 \001(\0132\022.weiyun.ReqMsgBody\022\'\n\013RspMs"
    "g_body\030\002 \001(\0132\022.weiyun.RspMsgBody\"Z\n\nReqM"
    "sgBody\022L\n\037ClientFileTransQueryMsgReq_bod"
    "y\030\351\007 \001(\0132\".weiyun.ClientFileTransQueryMs"
    "gReq\"Z\n\nRspMsgBody\022L\n\037ClientFileTransQue"
    "ryMsgRsp_body\030\351\007 \001(\0132\".weiyun.ClientFile"
    "TransQueryMsgRsp\"\213\001\n\032ClientFileTransQuer"
    "yMsgReq\022\021\n\tfile_size\030\001 \002(\003\022\014\n\004ukey\030\002 \002(\014"
    "\022\020\n\010file_key\030\003 \002(\014\022\025\n\rupload_domain\030\004 \002("
    "\t\022\021\n\tfile_name\030\005 \001(\t\022\020\n\010file_md5\030\006 \001(\014\"P"
    "\n\032ClientFileTransQueryMsgRsp\022\014\n\004flag\030\001 \001"
    "(\005\022\023\n\013next_offset\030\002 \001(\003\022\017\n\007process\030\003 \001(\005"
    "*#\n\003Cmd\022\034\n\027ClientFileTransQueryMsg\020\351\007", 717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgprotobuf.proto", &protobuf_RegisterTypes);
  MsgHead::default_instance_ = new MsgHead();
  MsgBody::default_instance_ = new MsgBody();
  ReqMsgBody::default_instance_ = new ReqMsgBody();
  RspMsgBody::default_instance_ = new RspMsgBody();
  ClientFileTransQueryMsgReq::default_instance_ = new ClientFileTransQueryMsgReq();
  ClientFileTransQueryMsgRsp::default_instance_ = new ClientFileTransQueryMsgRsp();
  MsgHead::default_instance_->InitAsDefaultInstance();
  MsgBody::default_instance_->InitAsDefaultInstance();
  ReqMsgBody::default_instance_->InitAsDefaultInstance();
  RspMsgBody::default_instance_->InitAsDefaultInstance();
  ClientFileTransQueryMsgReq::default_instance_->InitAsDefaultInstance();
  ClientFileTransQueryMsgRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgprotobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgprotobuf_2eproto {
  StaticDescriptorInitializer_msgprotobuf_2eproto() {
    protobuf_AddDesc_msgprotobuf_2eproto();
  }
} static_descriptor_initializer_msgprotobuf_2eproto_;

const ::google::protobuf::EnumDescriptor* Cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_descriptor_;
}
bool Cmd_IsValid(int value) {
  switch(value) {
    case 1001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgHead_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_Type_descriptor_;
}
bool MsgHead_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgHead_Type MsgHead::ReqMsg;
const MsgHead_Type MsgHead::RspMsg;
const MsgHead_Type MsgHead::Type_MIN;
const MsgHead_Type MsgHead::Type_MAX;
const int MsgHead::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgHead::kUinFieldNumber;
const int MsgHead::kSeqFieldNumber;
const int MsgHead::kTypeFieldNumber;
const int MsgHead::kCmdFieldNumber;
const int MsgHead::kRetcodeFieldNumber;
const int MsgHead::kRetmsgFieldNumber;
#endif  // !_MSC_VER

MsgHead::MsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_LONGLONG(0);
  seq_ = 0u;
  type_ = 1;
  cmd_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New() const {
  return new MsgHead;
}

void MsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_LONGLONG(0);
    seq_ = 0u;
    type_ = 1;
    cmd_ = 0;
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
        retmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }
      
      // required uint32 seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .weiyun.MsgHead.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::weiyun::MsgHead_Type_IsValid(value)) {
            set_type(static_cast< ::weiyun::MsgHead_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }
      
      // optional int32 cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_retcode;
        break;
      }
      
      // optional int32 retcode = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_retmsg;
        break;
      }
      
      // optional string retmsg = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->retmsg().data(), this->retmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uin(), output);
  }
  
  // required uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }
  
  // optional .weiyun.MsgHead.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional int32 cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cmd(), output);
  }
  
  // optional int32 retcode = 101;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->retcode(), output);
  }
  
  // optional string retmsg = 102;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->retmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uin(), target);
  }
  
  // required uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }
  
  // optional .weiyun.MsgHead.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional int32 cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cmd(), target);
  }
  
  // optional int32 retcode = 101;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->retcode(), target);
  }
  
  // optional string retmsg = 102;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->retmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uin());
    }
    
    // required uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // optional .weiyun.MsgHead.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 retcode = 101;
    if (has_retcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }
    
    // optional string retmsg = 102;
    if (has_retmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(seq_, other->seq_);
    std::swap(type_, other->type_);
    std::swap(cmd_, other->cmd_);
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBody::kReqMsgBodyFieldNumber;
const int MsgBody::kRspMsgBodyFieldNumber;
#endif  // !_MSC_VER

MsgBody::MsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBody::InitAsDefaultInstance() {
  reqmsg_body_ = const_cast< ::weiyun::ReqMsgBody*>(&::weiyun::ReqMsgBody::default_instance());
  rspmsg_body_ = const_cast< ::weiyun::RspMsgBody*>(&::weiyun::RspMsgBody::default_instance());
}

MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBody::SharedCtor() {
  _cached_size_ = 0;
  reqmsg_body_ = NULL;
  rspmsg_body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBody::~MsgBody() {
  SharedDtor();
}

void MsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete reqmsg_body_;
    delete rspmsg_body_;
  }
}

void MsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_descriptor_;
}

const MsgBody& MsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

MsgBody* MsgBody::default_instance_ = NULL;

MsgBody* MsgBody::New() const {
  return new MsgBody;
}

void MsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqmsg_body()) {
      if (reqmsg_body_ != NULL) reqmsg_body_->::weiyun::ReqMsgBody::Clear();
    }
    if (has_rspmsg_body()) {
      if (rspmsg_body_ != NULL) rspmsg_body_->::weiyun::RspMsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weiyun.ReqMsgBody ReqMsg_body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqmsg_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RspMsg_body;
        break;
      }
      
      // optional .weiyun.RspMsgBody RspMsg_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RspMsg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspmsg_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .weiyun.ReqMsgBody ReqMsg_body = 1;
  if (has_reqmsg_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reqmsg_body(), output);
  }
  
  // optional .weiyun.RspMsgBody RspMsg_body = 2;
  if (has_rspmsg_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rspmsg_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .weiyun.ReqMsgBody ReqMsg_body = 1;
  if (has_reqmsg_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reqmsg_body(), target);
  }
  
  // optional .weiyun.RspMsgBody RspMsg_body = 2;
  if (has_rspmsg_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rspmsg_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weiyun.ReqMsgBody ReqMsg_body = 1;
    if (has_reqmsg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqmsg_body());
    }
    
    // optional .weiyun.RspMsgBody RspMsg_body = 2;
    if (has_rspmsg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspmsg_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqmsg_body()) {
      mutable_reqmsg_body()->::weiyun::ReqMsgBody::MergeFrom(from.reqmsg_body());
    }
    if (from.has_rspmsg_body()) {
      mutable_rspmsg_body()->::weiyun::RspMsgBody::MergeFrom(from.rspmsg_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  
  if (has_reqmsg_body()) {
    if (!this->reqmsg_body().IsInitialized()) return false;
  }
  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other != this) {
    std::swap(reqmsg_body_, other->reqmsg_body_);
    std::swap(rspmsg_body_, other->rspmsg_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_descriptor_;
  metadata.reflection = MsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMsgBody::kClientFileTransQueryMsgReqBodyFieldNumber;
#endif  // !_MSC_VER

ReqMsgBody::ReqMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMsgBody::InitAsDefaultInstance() {
  clientfiletransquerymsgreq_body_ = const_cast< ::weiyun::ClientFileTransQueryMsgReq*>(&::weiyun::ClientFileTransQueryMsgReq::default_instance());
}

ReqMsgBody::ReqMsgBody(const ReqMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMsgBody::SharedCtor() {
  _cached_size_ = 0;
  clientfiletransquerymsgreq_body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMsgBody::~ReqMsgBody() {
  SharedDtor();
}

void ReqMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete clientfiletransquerymsgreq_body_;
  }
}

void ReqMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMsgBody_descriptor_;
}

const ReqMsgBody& ReqMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

ReqMsgBody* ReqMsgBody::default_instance_ = NULL;

ReqMsgBody* ReqMsgBody::New() const {
  return new ReqMsgBody;
}

void ReqMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientfiletransquerymsgreq_body()) {
      if (clientfiletransquerymsgreq_body_ != NULL) clientfiletransquerymsgreq_body_->::weiyun::ClientFileTransQueryMsgReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weiyun.ClientFileTransQueryMsgReq ClientFileTransQueryMsgReq_body = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientfiletransquerymsgreq_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .weiyun.ClientFileTransQueryMsgReq ClientFileTransQueryMsgReq_body = 1001;
  if (has_clientfiletransquerymsgreq_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->clientfiletransquerymsgreq_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .weiyun.ClientFileTransQueryMsgReq ClientFileTransQueryMsgReq_body = 1001;
  if (has_clientfiletransquerymsgreq_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->clientfiletransquerymsgreq_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMsgBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weiyun.ClientFileTransQueryMsgReq ClientFileTransQueryMsgReq_body = 1001;
    if (has_clientfiletransquerymsgreq_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientfiletransquerymsgreq_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMsgBody::MergeFrom(const ReqMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientfiletransquerymsgreq_body()) {
      mutable_clientfiletransquerymsgreq_body()->::weiyun::ClientFileTransQueryMsgReq::MergeFrom(from.clientfiletransquerymsgreq_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMsgBody::CopyFrom(const ReqMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMsgBody::IsInitialized() const {
  
  if (has_clientfiletransquerymsgreq_body()) {
    if (!this->clientfiletransquerymsgreq_body().IsInitialized()) return false;
  }
  return true;
}

void ReqMsgBody::Swap(ReqMsgBody* other) {
  if (other != this) {
    std::swap(clientfiletransquerymsgreq_body_, other->clientfiletransquerymsgreq_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMsgBody_descriptor_;
  metadata.reflection = ReqMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspMsgBody::kClientFileTransQueryMsgRspBodyFieldNumber;
#endif  // !_MSC_VER

RspMsgBody::RspMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspMsgBody::InitAsDefaultInstance() {
  clientfiletransquerymsgrsp_body_ = const_cast< ::weiyun::ClientFileTransQueryMsgRsp*>(&::weiyun::ClientFileTransQueryMsgRsp::default_instance());
}

RspMsgBody::RspMsgBody(const RspMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspMsgBody::SharedCtor() {
  _cached_size_ = 0;
  clientfiletransquerymsgrsp_body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspMsgBody::~RspMsgBody() {
  SharedDtor();
}

void RspMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete clientfiletransquerymsgrsp_body_;
  }
}

void RspMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMsgBody_descriptor_;
}

const RspMsgBody& RspMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

RspMsgBody* RspMsgBody::default_instance_ = NULL;

RspMsgBody* RspMsgBody::New() const {
  return new RspMsgBody;
}

void RspMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientfiletransquerymsgrsp_body()) {
      if (clientfiletransquerymsgrsp_body_ != NULL) clientfiletransquerymsgrsp_body_->::weiyun::ClientFileTransQueryMsgRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .weiyun.ClientFileTransQueryMsgRsp ClientFileTransQueryMsgRsp_body = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientfiletransquerymsgrsp_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .weiyun.ClientFileTransQueryMsgRsp ClientFileTransQueryMsgRsp_body = 1001;
  if (has_clientfiletransquerymsgrsp_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->clientfiletransquerymsgrsp_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .weiyun.ClientFileTransQueryMsgRsp ClientFileTransQueryMsgRsp_body = 1001;
  if (has_clientfiletransquerymsgrsp_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->clientfiletransquerymsgrsp_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspMsgBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .weiyun.ClientFileTransQueryMsgRsp ClientFileTransQueryMsgRsp_body = 1001;
    if (has_clientfiletransquerymsgrsp_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientfiletransquerymsgrsp_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMsgBody::MergeFrom(const RspMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientfiletransquerymsgrsp_body()) {
      mutable_clientfiletransquerymsgrsp_body()->::weiyun::ClientFileTransQueryMsgRsp::MergeFrom(from.clientfiletransquerymsgrsp_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMsgBody::CopyFrom(const RspMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMsgBody::IsInitialized() const {
  
  return true;
}

void RspMsgBody::Swap(RspMsgBody* other) {
  if (other != this) {
    std::swap(clientfiletransquerymsgrsp_body_, other->clientfiletransquerymsgrsp_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMsgBody_descriptor_;
  metadata.reflection = RspMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFileTransQueryMsgReq::kFileSizeFieldNumber;
const int ClientFileTransQueryMsgReq::kUkeyFieldNumber;
const int ClientFileTransQueryMsgReq::kFileKeyFieldNumber;
const int ClientFileTransQueryMsgReq::kUploadDomainFieldNumber;
const int ClientFileTransQueryMsgReq::kFileNameFieldNumber;
const int ClientFileTransQueryMsgReq::kFileMd5FieldNumber;
#endif  // !_MSC_VER

ClientFileTransQueryMsgReq::ClientFileTransQueryMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientFileTransQueryMsgReq::InitAsDefaultInstance() {
}

ClientFileTransQueryMsgReq::ClientFileTransQueryMsgReq(const ClientFileTransQueryMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientFileTransQueryMsgReq::SharedCtor() {
  _cached_size_ = 0;
  file_size_ = GOOGLE_LONGLONG(0);
  ukey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upload_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFileTransQueryMsgReq::~ClientFileTransQueryMsgReq() {
  SharedDtor();
}

void ClientFileTransQueryMsgReq::SharedDtor() {
  if (ukey_ != &::google::protobuf::internal::kEmptyString) {
    delete ukey_;
  }
  if (file_key_ != &::google::protobuf::internal::kEmptyString) {
    delete file_key_;
  }
  if (upload_domain_ != &::google::protobuf::internal::kEmptyString) {
    delete upload_domain_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (this != default_instance_) {
  }
}

void ClientFileTransQueryMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFileTransQueryMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFileTransQueryMsgReq_descriptor_;
}

const ClientFileTransQueryMsgReq& ClientFileTransQueryMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

ClientFileTransQueryMsgReq* ClientFileTransQueryMsgReq::default_instance_ = NULL;

ClientFileTransQueryMsgReq* ClientFileTransQueryMsgReq::New() const {
  return new ClientFileTransQueryMsgReq;
}

void ClientFileTransQueryMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_size_ = GOOGLE_LONGLONG(0);
    if (has_ukey()) {
      if (ukey_ != &::google::protobuf::internal::kEmptyString) {
        ukey_->clear();
      }
    }
    if (has_file_key()) {
      if (file_key_ != &::google::protobuf::internal::kEmptyString) {
        file_key_->clear();
      }
    }
    if (has_upload_domain()) {
      if (upload_domain_ != &::google::protobuf::internal::kEmptyString) {
        upload_domain_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientFileTransQueryMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 file_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ukey;
        break;
      }
      
      // required bytes ukey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ukey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ukey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_key;
        break;
      }
      
      // required bytes file_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upload_domain;
        break;
      }
      
      // required string upload_domain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upload_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upload_domain().data(), this->upload_domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_md5;
        break;
      }
      
      // optional bytes file_md5 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientFileTransQueryMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 file_size = 1;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->file_size(), output);
  }
  
  // required bytes ukey = 2;
  if (has_ukey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ukey(), output);
  }
  
  // required bytes file_key = 3;
  if (has_file_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->file_key(), output);
  }
  
  // required string upload_domain = 4;
  if (has_upload_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upload_domain().data(), this->upload_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->upload_domain(), output);
  }
  
  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_name(), output);
  }
  
  // optional bytes file_md5 = 6;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->file_md5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientFileTransQueryMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 file_size = 1;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->file_size(), target);
  }
  
  // required bytes ukey = 2;
  if (has_ukey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ukey(), target);
  }
  
  // required bytes file_key = 3;
  if (has_file_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_key(), target);
  }
  
  // required string upload_domain = 4;
  if (has_upload_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upload_domain().data(), this->upload_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->upload_domain(), target);
  }
  
  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name(), target);
  }
  
  // optional bytes file_md5 = 6;
  if (has_file_md5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->file_md5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientFileTransQueryMsgReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 file_size = 1;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size());
    }
    
    // required bytes ukey = 2;
    if (has_ukey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ukey());
    }
    
    // required bytes file_key = 3;
    if (has_file_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_key());
    }
    
    // required string upload_domain = 4;
    if (has_upload_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_domain());
    }
    
    // optional string file_name = 5;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional bytes file_md5 = 6;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_md5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFileTransQueryMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFileTransQueryMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFileTransQueryMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientFileTransQueryMsgReq::MergeFrom(const ClientFileTransQueryMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_ukey()) {
      set_ukey(from.ukey());
    }
    if (from.has_file_key()) {
      set_file_key(from.file_key());
    }
    if (from.has_upload_domain()) {
      set_upload_domain(from.upload_domain());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientFileTransQueryMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientFileTransQueryMsgReq::CopyFrom(const ClientFileTransQueryMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientFileTransQueryMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ClientFileTransQueryMsgReq::Swap(ClientFileTransQueryMsgReq* other) {
  if (other != this) {
    std::swap(file_size_, other->file_size_);
    std::swap(ukey_, other->ukey_);
    std::swap(file_key_, other->file_key_);
    std::swap(upload_domain_, other->upload_domain_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_md5_, other->file_md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientFileTransQueryMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFileTransQueryMsgReq_descriptor_;
  metadata.reflection = ClientFileTransQueryMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFileTransQueryMsgRsp::kFlagFieldNumber;
const int ClientFileTransQueryMsgRsp::kNextOffsetFieldNumber;
const int ClientFileTransQueryMsgRsp::kProcessFieldNumber;
#endif  // !_MSC_VER

ClientFileTransQueryMsgRsp::ClientFileTransQueryMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientFileTransQueryMsgRsp::InitAsDefaultInstance() {
}

ClientFileTransQueryMsgRsp::ClientFileTransQueryMsgRsp(const ClientFileTransQueryMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientFileTransQueryMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  next_offset_ = GOOGLE_LONGLONG(0);
  process_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFileTransQueryMsgRsp::~ClientFileTransQueryMsgRsp() {
  SharedDtor();
}

void ClientFileTransQueryMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientFileTransQueryMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFileTransQueryMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFileTransQueryMsgRsp_descriptor_;
}

const ClientFileTransQueryMsgRsp& ClientFileTransQueryMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgprotobuf_2eproto();  return *default_instance_;
}

ClientFileTransQueryMsgRsp* ClientFileTransQueryMsgRsp::default_instance_ = NULL;

ClientFileTransQueryMsgRsp* ClientFileTransQueryMsgRsp::New() const {
  return new ClientFileTransQueryMsgRsp;
}

void ClientFileTransQueryMsgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    next_offset_ = GOOGLE_LONGLONG(0);
    process_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientFileTransQueryMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_offset;
        break;
      }
      
      // optional int64 next_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_offset_)));
          set_has_next_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_process;
        break;
      }
      
      // optional int32 process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientFileTransQueryMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // optional int64 next_offset = 2;
  if (has_next_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->next_offset(), output);
  }
  
  // optional int32 process = 3;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientFileTransQueryMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // optional int64 next_offset = 2;
  if (has_next_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->next_offset(), target);
  }
  
  // optional int32 process = 3;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientFileTransQueryMsgRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int64 next_offset = 2;
    if (has_next_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_offset());
    }
    
    // optional int32 process = 3;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFileTransQueryMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFileTransQueryMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFileTransQueryMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientFileTransQueryMsgRsp::MergeFrom(const ClientFileTransQueryMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_next_offset()) {
      set_next_offset(from.next_offset());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientFileTransQueryMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientFileTransQueryMsgRsp::CopyFrom(const ClientFileTransQueryMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientFileTransQueryMsgRsp::IsInitialized() const {
  
  return true;
}

void ClientFileTransQueryMsgRsp::Swap(ClientFileTransQueryMsgRsp* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(next_offset_, other->next_offset_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientFileTransQueryMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFileTransQueryMsgRsp_descriptor_;
  metadata.reflection = ClientFileTransQueryMsgRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace weiyun

// @@protoc_insertion_point(global_scope)
