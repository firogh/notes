
# Priority inversion and inheritance
[Linus on priority inheritance](https://yarchive.net/comp/linux/priority_inheritance.html)
[Priority inheritance in the kernel](https://lwn.net/Articles/178253/)
rt_mutex: RT Mutexes: blocking mutual exclusion locks with PI support

# File locking
[Mandatory File Locking For The Linux Operating System](https://www.kernel.org/doc/Documentation/filesystems/mandatory-locking.txt)
[Linux 2.6 中的文件锁](https://www.ibm.com/developerworks/cn/linux/l-cn-filelock/index.html)
[Demo for File locking](http://voyager.deanza.edu/~perry/lock.html)

# Semaphore 
[Linus on semaphore](https://yarchive.net/comp/linux/semaphores.html)
 150    213  kernel/printk/printk.c <<down_console_sem>>
             down(&console_sem);\
 151    231  net/core/netpoll.c <<netpoll_poll_disable>>
             down(&ni->dev_lock);
it was implement based on spinlock.
it can have more than one holder at any time (the number decided at initialization time),
although it is most commonly used as a single-holder lock (a mutex).
if you can not get a semaphore, your task will put itself on the wait queue, and be woken
up the semaphore is released.
sleepable
preemptable
* xadd vs spinlock
## LQO
* %k1 %w1 in kernel up_write
https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#x86Operandmodifiers
https://gcc.gnu.org/onlinedocs/gcc-4.2.0/gccint/Machine-Modes.html
https://stackoverflow.com/questions/34459803/in-gnu-c-inline-asm-whatre-the-modifiers-for-xmm-ymm-zmm-for-a-single-operand?rq=1

# RW semaphore
[rwsem: Support optimistic spinning](https://lwn.net/Articles/598577/)
mmap_sem
__RWSEM_INIT_COUNT(name)        .count = ATOMIC_LONG_INIT(RWSEM_UNLOCKED_VALUE)
#define RWSEM_UNLOCKED_VALUE            0x00000000L
up_read -> dec
down_read_trylock
if add < 0;
	writer is holding the semaphore
else
	get lock

down_read -> inc
if add < 0 # in memory
	call_rwsem_down_read_failed and wait sem->wait_list
else jns
	get lock	

down_write_trylock
if eax = 0;
	get lock by add RWSEM_ACTIVE_WRITE_BIAS
else
	other holds lock

down_write
	add RWSEM_ACTIVE_WRITE_BIAS  # in memory!
Lock: 
= 0 is unlocked.
> 0 : Reader holds lock
< 0 : Writer holds lock
