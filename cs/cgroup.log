

# V1
[Control groups series by Neil Brown](https://lwn.net/Articles/604609/)
[Documentation/cgroups/cgroups.txt](https://lwn.net/Articles/524935/) or Documentation/cgroup-v1/cgroups.txt

# Hierarchy
[Thus it is possible to have 12 different hierarchies, one for each subsystem, or a single hierarchy with all 12 subsystems attached, or any other combination in between.](https://lwn.net/Articles/606699/)
## Dummy hierarchy
rootnode.subsys_list
check cgroup_init_subsys for dummytop group inilialization
cgroup_init_early and cgroup_init
static struct cgroupfs_root rootnode;

## Active hierarchy
struct cgroupfs_root stands for a hierarchy; all hierarchies are liked in the roots as shown in proc_cgroup_show. They are called active root or hierarchy.
Check cgroup_mount
/sys/fs/cgroup> wc -l blkio/tasks perf_event/tasks cpu,cpuacct/tasks  | xargs -n6
888 blkio/tasks 888 perf_event/tasks 888 cpu,cpuacct/tasks
### Top group
        /* cannot set to root cgroup */ in mem_cgroup_oom_control_write 
        if (!cgrp->parent) return -EINVAL;
and in sched_group_set_shares
        /*
         * We can't change the weight of the root cgroup.
         */
        if (!tg->se[0])
                return -EINVAL;
In rebind_subsystems(), we learned that the top group of active hierarchy are bound to Dummy hierarchy and in above to write handler we learned that all writes are not permitted to the top group.

# Cgroup
d_fsdata -> cgroup and cgroup -> dentry
struct cgroup

# Cgroup subsys 
## Cgroup subsys - ss
struct cgroup_subsys
## Cgroup subsys state - CSS
struct cgroup_subsys_state
css_create
css->flags: CSS_ROOT, CSS_REMOVED,


# Linkage: struct cgrp_cset_link
From task to cgroup in a specic hierarchy: task->css_set->cset_links -> cgrp_cset_link.cgrp; check proc_cgroup_show
From cgroump to task: cgroup->css_sets-> cgrp_cset_link.cset = css_set.hacks.
## Older version check struct cg_cgroup_link

# Task
## Init CSS set
Check cgroup_init_early or cgroup_init for init_css_set

# Cgroup fs
## cgroup_mount: 
sb->s_root->d_fsdata = root_cgrp;
We can mount a mouted hierarchy to other directoryes.
mount | grep cgroup | grep memory
cgroup on /sys/fs/cgroup/memory type cgroup (rw,relatime,memory)
cgroup on /tmp/x type cgroup (rw,relatime,memory)
cgroup on /tmp/b type cgroup (rw,relatime,memory)
mount | grep cgroup2
cgroup on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime)
cgroup on /tmp/a type cgroup2 (rw,relatime)

## cgroup_mkdir

## cgroup_file_write

## Move task to a cgroup
attach_task_by_pid

# Procfs cgroup data
/proc/cgroups: proc_cgroupstats_show
/proc/self/cgroup: proc_cgroup_show and for_each_active_root

# CPU cgroup
## Mount
## mkdir
cgroup_mkdir 
cgroup_create
cpu_cgroup_create
sched_create_group

## Move a task to cpu_cgroup
cgroup_tasks_write -> cgroup_attach_task->
	cgroup_task_migrate
	cpu_cgroup_attach_task
		task_subsys_state_check(tsk, cpu_cgroup_subsys_id: 
		enum cgroup_subsys_id = 1
			task->cgroups->subsys[subsys_id]
		struct task_group *sched_task_group; // task_struct
		task_move_group_fair -> set_task_rq

# V2
[cgroupv2: Linux's new unified control group hierarchy](https://chrisdown.name/2017/03/01/cgroupv2-linux-new-cgroup-hierarchy.html)

# Unified cgroup
[The unified control group hierarchy in 3.16](https://lwn.net/Articles/601840/)
