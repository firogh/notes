
# IO
[Linux kernel IO subsystem - by Jan Kara](https://www.youtube.com/watch?v=2tu__ZHC0mI)
https://www.postgresql.eu/events/fosdem2019/sessions/session/2346/slides/159/fosdem_linux_io.pdf
## Memory hierarchy
[Latency Numbers Every Programmer Should Know](http://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)

## Synchronized, Synchronous, and Asynchronous Operations
Check LSP 3rd Chapter 4.
Synchronous I/O is a user space notation.
Synchronous here actually means wait or blocking.
Execution of process waits for I/O operations. I/O operations can be explained in different level e.g. system call, buffer cache.
[As Discrete lizard suggests, there is not some precise CS-wide definition for these terms. ... Nevertheless, a vague general statement is that in "synchronous" systems, things "wait" for other things, while in "asynchronous" systems, things don't "wait".](https://cs.stackexchange.com/questions/87195/what-does-synchronous-and-asynchronous-mean-in-computer-science)

# Observability 
io wait
commit 8f0dfc34e9b323a028c2ec41abb7e9de477b7a94
Refs: v2.6.31-rc8-33-g8f0dfc34e9b3
Author:     Arjan van de Ven <arjan@linux.intel.com>
AuthorDate: Mon Jul 20 11:26:58 2009 -0700
Commit:     Ingo Molnar <mingo@elte.hu>
CommitDate: Wed Sep 2 08:44:08 2009 +0200
    sched: Provide iowait counters
    For counting how long an application has been waiting for 
    (disk) IO, there currently is only the HZ sample driven
    information available, while for all other counters in this
    class, a high resolution version is available via 
    CONFIG_SCHEDSTATS.
    In order to make an improved bootchart tool possible, we also
    need a higher resolution version of the iowait time.
    This patch below adds this scheduler statistic to the kernel.
Firo: p->in_iowait

# Memory-mapped file I/O
Check LSP chapter 4: Mapping Files into Memory

# Asynchronous I/O
[Non-blocking buffered file read operations](https://lwn.net/Articles/612483/)
# Buffered I/O 
[Ensuring data reaches disk](https://lwn.net/Articles/457667/)

# Buffered write
[Why buffered writes are sometimes stalled](http://yoshinorimatsunobu.blogspot.com/2014/03/why-buffered-writes-are-sometimes.html)
[Status of buffered write path (deadlock fixes)](http://lkml.iu.edu/hypermail/linux/kernel/0612.0/1223.html)
[Some VFS address space operations changes](https://lwn.net/Articles/254856/)
Buffer-backed address_space

# File mmap
## page_mkwrite
commit 9637a5efd4fbe36164c5ce7f6a0ee68b2bf22b7f
Refs: v2.6.17-1704-g9637a5efd4fb
Author:     David Howells <dhowells@redhat.com>
AuthorDate: Fri Jun 23 02:03:43 2006 -0700
Commit:     Linus Torvalds <torvalds@g5.osdl.org>
CommitDate: Fri Jun 23 07:42:51 2006 -0700
    [PATCH] add page_mkwrite() vm_operations method
[File holes, races, and mmap()](https://lwn.net/Articles/357767/)
[Add notification of page becoming writable to VMA ops](https://lwn.net/Articles/162178/)

# I/O hardware
serial communication: UART(16550) + RS-232 
parallel communication: SCSI, ISA, ATA, PCI, FSB 
