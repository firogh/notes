
# Crash
[Crash Dump Analysis](https://drive.google.com/file/d/1NhZZo5DLOmE0d_97ZfwAsQ6ae1av3knw/view?usp=sharing)

# Debug symbol
make kernel/sched.s V=1
./scripts/decodecode < Oops.txt

# GDB
gdb vmlinux /proc/kcore
text_addr=/sys/module/char-read-write/sections/.text
add-symbol-file /home/nkhare/char-read-write.ko $text_addr
print &((struct kmem_cache *)0)->offset

# Boot issues
debug ignore_loglevel earlyprintk=ttyS0,115200, keep keep_bootcon initcall_debug dyndbg=+plmf

# Kernel oops
[lkml-Linus-Al-Viro-oops-debug](http://yarchive.net/comp/linux/oops_decoding.html)
[kernel oops tracing](https://www.kernel.org/doc/Documentation/oops-tracing.txt)
[Debugging a kernel crash found by syzkaller](http://vegardno.blogspot.com/2016/08/sync-debug.html?m=1)

# Kprobes 

# Systemtap
[systemtap脚本分析系统中dentry SLAB占用过高问题](https://yq.aliyun.com/articles/131870)


# CONFIG_DEBUG_PAGEALLOC
check_poison_mem in alloc_pages
free_pages_prepare posion
# eBPF
https://lwn.net/Articles/740157/
[How to turn any syscall into an event: Introducing eBPF Kernel probes](https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/)

# Lockup
[kernle doc - Softlockup detector and hardlockup detector](https://www.kernel.org/doc/Documentation/lockup-watchdogs.txt)

# slab Redzone

# Deadlock
Lockdep
[The kernel lock validator](https://lwn.net/Articles/185666/)
[Runtime locking correctness validator](https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt)
https://lkml.org/lkml/2013/2/4/4

# Kasan
setup_arch->kasan_init
[KernelAddressSanitizer a fast memory error detector for the Linux kernel](http://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20North%20America%202015%20KernelAddressSanitizer.pdf)
[kasan found stack out of bounds](https://github.com/zfsonlinux/zfs/pull/4708/commits/01709937be3c28a89eff83e0e657a72826947506)
[lwn The kernel address sanitizer](https://lwn.net/Articles/612153/)
[out of bounds](https://lkml.org/lkml/2014/12/3/128)

# Tracing
[Linux Tracing Technologies](https://www.kernel.org/doc/html/v4.18/trace/index.html)

# Print
## Early print
putstr
early_printk
Linux serial-port driver is interrupt driven, if irq-off console will not work!

## Dynamic print
Precondition: CONFIG_DYNAMIC_DEBUG
How to use it during kernel booting?
Use boot option:
dyndbg="file drivers/usb/host/ehci-hcd.c +p; file
drivers/usb/host/ehci-ppc-of.c +p" loglevel=8
loglevel=8 dyndbg="module ehci_pci +p;
module ehci_hcd +p; module usbcore +p"
After booting:
/sys/kernel/debug/dynamic_debug/control
## Dev print
drivers/base/core.c
define_dev_printk_level
THese functions are like pr_func
dev_debug

# BUG made by me
* print_signal_info wrong pritk parameters position
        printk(KERN_NOTICE "K %d : %d -> %s %d %s %d\n", sig, q->info.si_code,
                ss[2], ss[3], task_tgid_vnr(r_t), task_tgid_vnr(r_p));
 Watch compile warning info can be avoid of this bug.
* spin_lock(sighand) invoke down_sem and cond_resched...
        __send_signal()

# The nulified timer function issue
我前几天定位了一个Softirq中timer corruption的问题, 现象是timer func是个非法地址.
首先, 一下子不能确认是由那种Bug type导致的.可能是Improper Restriction of Operations
within the Bounds of a Memory Buffer 也可能是Use after free. 所以此时debug的关键所在
就是收集observations,也就是function的名字, 而我遇到的这个问题timer 被完全写坏了.
可以用ftrace收集所有timer 的地址和function, 再从oops里面得到timer地址,回头找ftrace
log中记录的function, 从而定位问题. 稍后介绍, 如何通过expect抓屏幕log.
这个方法没成功, 时候分析知道是因为panic的瞬间出问题的timer的地址和function没来得及
记录到ftrace.怎么办? 我直接说了, 我想到一个办法, 把timer的空间增大, 增大的空间用来
保存function,在oops把这块内存打出来. 此法非常有用, timer的function一下子就找到了, 进而
确认了问题是use after free. 非常开心:-)这里的解释了如何收集observations的技巧.对待use
after free的问题是够了, 以后用到这类问题基本可以妙解了.

