# Hugetlb page
https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt
[Huge pages part 1 (Introduction)](https://lwn.net/Articles/374424/)
[hugepage 分析](https://ggaaooppeenngg.github.io/zh-CN/2017/04/30/hugepage-%E5%88%86%E6%9E%90/)
## status
p hstates

# THP
[Transparent hugepages](https://lwn.net/Articles/359158/)
[Transparent huge pages in 2.6.38](https://lwn.net/Articles/423584/)
https://www.kernel.org/doc/Documentation/vm/transhuge.txt
[THP: Hugepage导致进程占用物理内存过多的问题](http://hustcat.github.io/hugepage-problem/
[Disable Transparent Huge Pages (THP)](https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/)
[Disable Transparent Hugepages](https://blog.nelhage.com/post/transparent-hugepages/)
[Transparent Hugepages: measuring the performance impact](https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/)

## Purposes or ends
Transparent Hugepage Support is an alternative means of
using huge pages for the backing of virtual memory with huge pages
that supports the automatic promotion and demotion of page sizes and
without the shortcomings of hugetlbfs.
Benefits:
1. Since we can map 2MB memory for each page fault, it can the enter/exit kernel frequency by a 512 times.
2. the TLB miss will run faster. Why, [fewer levels of page tables must be traversed to get to the physical address](https://lwn.net/Articles/423584/) and [The page table walk is expensive because it may require multiple memory accesses (they may hit the CPU L1/L2/L3 caches though](https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/)
3. a single TLB entry will be mapping a much larger amount of virtual memory in turn reducing the number of TLB misses. 

## Form design
Currently it only works for anonymous memory mappings and tmpfs/shmem.
