# Reference
filesystems/vfs.txt

# LQO
[Linux内核文件Cache 机制](http://www.ilinuxkernel.com/files/Linux.Kernel.Cache.pdf)

# The history Buffer cache
[Beefing Up the Buffer Cache](https://drive.google.com/file/d/11sLlREfK_3EnEK_BlqnOxVGFUFnDbQVs/view?usp=sharing) and [UBC](https://drive.google.com/file/d/1ZY2MaoJCb8R317ZjLfGdvxcKq4Jo_k6i/view?usp=sharing)
Starting from stable version 2.4.10, the buffer cache does not really exist anymore. In
fact, for reasons of efficiency, block buffers are no longer allocated individually;
instead, they are stored in dedicated pages called “buffer pages,” which are kept in
the page cache.  -- ULK Chapter 15: Storing Blocks in the Page Cache
Section Storing Blocks in Page Cache is invaluable; 

# Block buffers
buffer_head
This descriptor contains all the information needed by the kernel to know how to handle the block;
thus, before operating on each block, the kernel checks its buffer head.
submit_bh()

# Buffer pages 
attach_page_buffers

# Block device buffer pages
grow_buffers-> grow_dev_page
try_to_release_page

# Buffer cache
Inode is stored on the buffer cache; check sync_inode_metadata and __ext2_write_inode


## Search structure
file page cache : key is page.index( offset in file), item is page.
* swap cache - a fake cache
radix tree same as page cache
add_to_swap 
* page cache
Radix tree
page_cache_tree_insert, add_to_page_cache_lru

## Reclaim algorithm

## Write behavior

## Cache coherence

# Page flags
PG_private: check definition
 * The PG_private bitflag is set on pagecache pages if they contain filesystem
 * specific data (which is normally at page->private). It can be used by
 * private allocations for its own usage.
